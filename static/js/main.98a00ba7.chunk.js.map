{"version":3,"sources":["img/arni.jpg","sound/Terminator.mp3","Item.js","Wrapper.js","Counter.js","reducer.js","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","__webpack_require__","p","Item","render","classForItem","_this","props","index","id","react_default","a","createElement","className","src","logo","alt","onClick","itemOnClick","React","Component","Wrapper","items","item","map","src_Item","key","Counter","count","initialState","reducer","state","arguments","length","undefined","action","type","_objectSpread","getIndex","Math","floor","random","newCount","App","getRandomImageIndex","getRandomIndex","setInterval","itemOnClickAC","UIfx","sound","play","src_Wrapper","src_Counter","ConnectedApp","connect","comp","dispatch","getRandomIndexAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98a00ba7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arni.6fcdb2fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Terminator.40dd3f16.mp3\";","import React from 'react';\nimport './App.css';\nimport logo from './img/arni.jpg';\n\nclass Item extends React.Component {\n    render = () => {\n        let classForItem = this.props.index === this.props.id ? 'photo show' : 'photo';\n        return (\n\n            <div className=\"item\" id={this.props.id}>\n                <img src={logo} alt='' className={classForItem} onClick={this.props.itemOnClick}/> :\n            </div>\n        );\n    }\n}\n\nexport default Item;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Item from './Item'\n\nclass Wrapper extends React.Component {\n\n    render = () => {\n        let items = this.props.item.map((item) => {\n            return <Item key={item.id} id={item.id} index={this.props.index}\n                         itemOnClick={this.props.itemOnClick}/>\n        })\n        return (\n            <div className=\"wrapper\">\n                {items}\n            </div>\n        );\n    }\n}\n\nexport default Wrapper;\n\n","import React from 'react';\nimport './App.css';\n\nclass Counter extends React.Component {\n    render = () => {\n        return (\n            <div className=\"counter\">\n                <span className='user'>  User:  </span> {this.props.count}\n            </div>\n        );\n    }\n}\n\nexport default Counter;\n\n","export const GET_INDEX = 'GET-INDEX';\r\nexport const COUNTER = 'COUNTER';\r\n\r\nconst initialState = {\r\n    item: [\r\n        {id: 1},\r\n        {id: 2},\r\n        {id: 3},\r\n        {id: 4},\r\n        {id: 5},\r\n        {id: 6},\r\n        {id: 7},\r\n        {id: 8},\r\n        {id: 9}\r\n    ],\r\n    index: 1,\r\n    count: 0,\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_INDEX:\r\n            return {\r\n                ...state,\r\n                index: action.getIndex = Math.floor(Math.random() * 9)\r\n            };\r\n        case COUNTER :\r\n            return {\r\n                ...state,\r\n                count: action.newCount + 1\r\n            }\r\n    }\r\n    return state\r\n};\r\n\r\nexport const getRandomIndexAC = (getIndex) => {\r\n    return {type: GET_INDEX, getIndex}\r\n};\r\nexport const itemOnClickAC = (newCount) => {\r\n    return {type: COUNTER, newCount}\r\n};\r\n\r\nexport default reducer","import React from 'react';\nimport './App.css';\nimport Wrapper from './Wrapper';\nimport Counter from './Counter';\nimport sound from './sound/Terminator.mp3';\nimport UIfx from 'uifx';\nimport { getRandomIndexAC, itemOnClickAC} from \"./reducer\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n\n    getRandomImageIndex = (getIndex) => {\n        this.props.getRandomIndex(getIndex)\n    };\n\n    id = setInterval(() => {\n        this.getRandomImageIndex()\n    }, 700);\n\n    itemOnClick = () => {\n        this.props.itemOnClickAC(this.props.count);\n        let tick = new UIfx(sound);\n        tick.play();\n    };\n\n    render = () => {\n        return (\n            <div className='App'>\n                <Wrapper item={this.props.item} index={this.props.index}\n                         itemOnClick={this.itemOnClick}/>\n                <Counter count={this.props.count}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        index: state.index,\n        count: state.count,\n        item: state.item,\n        comp: state.comp\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getRandomIndex: (getIndex) => {\n            const action = getRandomIndexAC(getIndex);\n            dispatch(action)\n        },\n        itemOnClickAC: (newCount) => {\n            const action = itemOnClickAC(newCount);\n            dispatch(action)\n        },\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\n\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store=createStore(reducer)\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}